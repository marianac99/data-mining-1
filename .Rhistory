install.packages("arules")
install.packages("arulesViz")
#install.packages("arules")
#install.packages("jsonlite")
#install.packages("arulesviz")
library("arules")
#install.packages("arules")
#install.packages("jsonlite")
#install.packages("arulesviz")
library("arules")
AdultUCI[["fnlwgt"]] <- NULL
data("AdultUCI")
AdultUCI[1:5,]
summary(AdultUCI)
AdultUCI[["fnlwgt"]] <- NULL
#install.packages("arules")
#install.packages("jsonlite")
#install.packages("arulesviz")
library("arules")
data("AdultUCI")
AdultUCI[1:5,]
summary(AdultUCI)
AdultUCI[["fnlwgt"]] <- NULL
AdultUCI[["education-num"]] <- NULL
AdultUCI[["age"]] <- ordered(cut(AdultUCI[["age"]], c(15, 25, 45, 65, 100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[["hours-per-week"]] <- ordered(cut(AdultUCI[["hours-per-week"]], c(0, 5, 40, 60, 168)), labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[["capital-gain"]] <- ordered(cut(AdultUCI[["capital-gain"]], c(-Inf, 0, median(AdultUCI[["capital-gain"]][AdultUCI[["capital-gain"]] > 0]), Inf)), labels=c("None", "Low", "High"))
AdultUCI[["capital-loss"]] <- ordered(cut(AdultUCI[["capital-loss"]], c(-Inf, 0, median(AdultUCI[["capital-loss"]][AdultUCI[["capital-loss"]] > 0 ]), Inf)), labels = c("none", "low", "high"))
AdultDev <- as(AdultUCI, "transactions")
summary(AdultDev)
itemFrequencyPlot(AdultDev[, itemFrequency(AdultDev)>0.1], cex.names = 0.8)
rules <- apriori(AdultDev, parameter = list(support = 0.01, confidence = 0.6))
rules
summary(rules)
rulesIncomeSmall <- subset(rules, subset = rhs %in% "income=small" & lift > 1.2)
inspect(sort(rulesIncomeSmall, by = "confidence")[1:3])
rulesIncomeLarge <- subset(rules, subset = rhs %in% "income=large" & lift > 1.2)
inspect(sort(rulesIncomeLarge, by = "confidence")[1:3])
#Completa los parámetros de la siguiente línea
rulesWorkClassPrivate <- subset(rules, subset = rhs %in% "" & lift >0)
#Completa los parámetros de la siguiente línea
rulesWorkClassPrivate <- subset(rules, subset = rhs %in% "workclass=Private" & lift >1.2)
#Completa los parámetros de la siguiente línea
rulesWorkClassPrivate <- subset(rules, subset = rhs %in% "workclass=Private" & lift >1.2)
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "confidence")[1:3])
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "support")[1:3])
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "confidence")[1:3])
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "support")[1:5])
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "confidence")[1:5])
"Completa los parámetros de la siguiente línea"
inspect(sort(rulesWorkClassPrivate, by = "support")[1:5])
inspect(sort(rulesWorkClassPrivate, by = "support")[1:5])
install.packages("arulesViz")
install.packages("devtools")
devtools::install_github("hadley/emo")
library("emo")
library("arulesViz")
data("Groceries")
summary(Groceries)
rules <- apriori(Groceries, parameter = list(support = 0.001, confidence = 0.05))
summary(rules)
inspect(head(rules, n = 3, by = "lift"))
args(getS3method("plot", "rules"))
install.packages("arulesViz")
install.packages("devtools")
devtools::install_github("hadley/emo")
library("emo")
install.packages("devtools")
library("arulesViz")
data("Groceries")
summary(Groceries)
rules <- apriori(Groceries, parameter = list(support = 0.001, confidence = 0.05))
summary(rules)
inspect(head(rules, n = 3, by = "lift"))
args(getS3method("plot", "rules"))
plot(rules)
head(quality(rules))
#plot(rules, measure = c("h-axis", "v-axis"), shading = "measure")
plot(rules, measure = c("support", "lift"), shading = "confidence")
# Por omisión la gráficas scatter plot en arulesViz presentan support en el eje horizontal y confidence en el eje vertical
#plot(rules, shading="measure")
plot(rules, shading = "coverage")
plot(rules, method= "two-key plot")
#sel <- plot(rules, measure = c("support", "lift"), shading = "confidence", interactive = TRUE)
#TODO: Retira los comentarios la primera vez para instalar los paquetes.
install.packages("arulesViz")
install.packages("devtools")
devtools::install_github("hadley/emo")
install.packages("devtools")
library("arulesViz")
library("emo")
data("Groceries")
summary(Groceries)
str(Groceries)
inspect(Groceries[1:10])
#TODO: Asigna a STUDENT_ID los dígitos de tu matrícula (p.e. 430000).
STUDENT_ID = 01376544
numTransactions <- round(length(Groceries) * 0.8)
set.seed(STUDENT_ID)
myGroceries <- sample(Groceries, numTransactions)
summary(myGroceries)
1
itemFrequencyPlot(myGroceries)
#TODO: Modifica el valor de topN a 30
itemFrequencyPlot(myGroceries, topN = 30)
rules <- apriori(myGroceries, parameter = list(support = 0.001, confidence = 0.05))
summary(rules)
str(rules)
inspect(head(rules, n = 3, by = "lift"))
head(quality(rules))
args(getS3method("plot", "rules"))
plot(rules)
#TODO: Asigna los parámetros a plot para:
# support en el eje horizontal (h-axis)
# lift en el eje vertical (v-xaix)
# confidence (measure) como gradiente de color (shading)
#plot(rules, measure = c("h-axis", "v-axis"), shading = "measure")
plot(rules, measure = c("support", "lift"), shading = "confidence")
#TODO: Scatter plot con support y confidence en los ejes horizontal y vertical, empleando coverage como medición asociada a la escala de colores
# Por omisión la gráficas scatter plot en arulesViz presentan support en el eje horizontal y confidence en el eje vertical
#plot(rules, shading="measure")
plot(rules, shading = "coverage")
plot(rules, method= "two-key plot")
